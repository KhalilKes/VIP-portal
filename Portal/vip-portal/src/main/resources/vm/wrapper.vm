#!/bin/bash

#####################
#     Functions     #
#####################

function info {
  local D=`date`
  echo [ INFO - $D ] $*
}

function warning {
  local D=`date`
  echo [ WARN - $D ] $*
}

function error {
  local D=`date`
  echo [ ERROR - $D ] $* >&2
}

function downloadLFN {

  local LFN=$1
  local LOCAL=${PWD}/`basename ${LFN}`

  info "getting file size and computing sendReceiveTimeout"
  size=`lfc-ls -l ${LFN} | awk -F' ' '{print $5}'`
  sendReceiveTimeout=`echo $[${size}/150/1024]`
  if [ "$sendReceiveTimeout" = "" ] || [ $sendReceiveTimeout -le 900 ]; then echo "sendReceiveTimeout empty or too small, setting it to 900s"; sendReceiveTimeout=900; else echo "sendReceiveTimeout is $sendReceiveTimeout"; fi;
  info "Removing file ${LOCAL} in case it is already here"
  \rm -f ${LOCAL}

  info "Checking if the file is on local SE ${VO_BIOMED_DEFAULT_SE}"
  local closeSURL=`lcg-lr lfn:${LFN} | grep ${VO_BIOMED_DEFAULT_SE}`
  if [ "${closeSURL}" != "" ]
  then
    info "It is. Trying to download the file from there"
    LINE="lcg-cp -v --connect-timeout 10 --sendreceive-timeout $sendReceiveTimeout --bdii-timeout 10 --srm-timeout 30 ${closeSURL} file:${LOCAL}"
    info ${LINE}
    ${LINE} &> lcg-log
    if [ $? = 0 ]
    then
      info "lcg-cp worked fine"
      lcg_source=`cat lcg-log | awk -F"://" '/Trying SURL srm/ {print $2}' | awk -F"/" '{print $1}'|awk -F":" '{print $1}'`;
      lcg_destination=`hostname`;
      lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`;
      info "DownloadCommand=lcg-cp Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time";
      return 0
    else
      error "It failed, falling back on regular lcg-cp"
    fi
  else
    info "It's not, falling back on regular lcg-cp"
  fi

info "Downloading file ${LFN}..."
LINE="lcg-cp -v --connect-timeout 10 --sendreceive-timeout $sendReceiveTimeout --bdii-timeout 10 --srm-timeout 30 lfn:${LFN} file:${LOCAL}"
info ${LINE}
${LINE} &> lcg-log
if [ $? = 0 ]
then
  info "lcg-cp worked fine"
  lcg_source=`cat lcg-log | awk -F"://" '/Trying SURL srm/ {print $2}' | awk -F"/" '{print $1}'|awk -F":" '{print $1}'`;
  lcg_destination=`hostname`;
  lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`;
  info "DownloadCommand=lcg-cp Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time";
else
  error "lcg-cp failed"
  error "`cat lcg-log`"
  return 1
fi
\rm lcg-log 
}

function checkBosh {
  local BOSH_CVMFS_PATH=$1
  #by default, use CVMFS bosh
  ${BOSH_CVMFS_PATH}/bosh create foo.sh 
  if [ $? != 0 ]
  then
    info "CVMFS bosh in ${BOSH_CVMFS_PATH} not working, checking for a local version"
    bosh create foo.sh 
    if [ $? != 0 ]
    then
        info "bosh is not found in PATH or it is does not work fine, searching for another local version"
        local HOMEBOSH=`find $HOME -name bosh`
        if [ -z "$HOMEBOSH" ]
        then
            info "bosh not found, trying to install it"
            pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org boutiques --prefix $PWD || error "pip install boutiques failed"
            export BOSHEXEC="$PWD/bin/bosh"
        else
            info "local bosh found in $HOMEBOSH"
            export BOSHEXEC=$HOMEBOSH
        fi
    else # bosh is found in PATH and works fine
        info "local bosh found in $PATH"
        export BOSHEXEC="bosh"
    fi
  else # if bosh CVMFS works fine
    export BOSHEXEC="${BOSH_CVMFS_PATH}/bosh"
  fi
}
#####################
# Arguments parsing #
#####################

shift # first parameter is always results directory

cat << JSONPARAMETERS  > input_param_file.json
{
JSONPARAMETERS

while [[ $# > 0 ]]
do
key="$1"
case $key in
    #foreach($input in $tool.getInputs())
--$input.getId().toLowerCase())
       #if($tool.hasNextInput($input))
            echo "\"$input.getId()\" : \"$2\"," >> input_param_file.json
       #else
            echo "\"$input.getId()\" : \"$2\"" >> input_param_file.json
       #end
    ;;
    #end
*) # unknown option
esac
shift # past argument or value
shift
done

cat << JSONPARAMETERS  >> input_param_file.json
}
JSONPARAMETERS

##########################
# Command-line execution #
##########################

TOOLNAME="$tool.getName()"
JSONFILE="${TOOLNAME}.json"

# BOSH_CVMFS_PATH is defined by GASW from the settings file
checkBosh $BOSH_CVMFS_PATH
$BOSHEXEC exec launch $JSONFILE input_param_file.json -v $PWD/../cache:$PWD/../cache

if [ $? != 0 ]
then
    error "$tool.name execution failed!"
    exit 1
fi

info "Execution of $tool.getName() completed."

